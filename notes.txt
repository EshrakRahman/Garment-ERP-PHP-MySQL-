read me files 

# Garment ERP (PHP + MySQL)

A lightweight ERP system for garment manufacturers, built with **PHP & MySQL**.  
This project was developed as a **10-day MVP challenge** to learn ERP design and implementation.

---

## 🚀 Features
- Role-based login (Admin, Merchandiser, Storekeeper, Production, Finance)
- Buyers & Suppliers management
- Orders with Bill of Materials (BOM)
- Inventory (Stock In/Out, Current Stock Report)
- Production tracking (Cutting, Sewing, Finishing)
- Finance (Buyer & Supplier Invoices, Outstanding Reports)
- Dashboard with key KPIs

---

## 📂 Folder Structure
garment-erp/
│── config/
│   └── config.php          # DB connection (MySQL)
│
│── includes/
│   ├── header.php          # Common header (Bootstrap, navigation, session check)
│   ├── footer.php          # Common footer
│   └── auth.php            # Login check & role handling
│
│── modules/
│   ├── users/              # User management
│   │   ├── login.php
│   │   ├── logout.php
│   │   └── register.php    # (optional, for admin to add users)
│   │
│   ├── buyers/             # Buyer management
│   │   ├── index.php       # List buyers
│   │   ├── add.php         # Add buyer
│   │   └── edit.php        # Edit buyer
│   │
│   ├── suppliers/          # Supplier management
│   │   ├── index.php
│   │   ├── add.php
│   │   └── edit.php
│   │
│   ├── items/              # Inventory master
│   │   ├── index.php
│   │   ├── add.php
│   │   └── edit.php
│   │
│   ├── orders/             # Orders & BOM
│   │   ├── index.php
│   │   ├── add.php
│   │   └── bom.php
│   │
│   ├── stock/              # Stock transactions
│   │   ├── stock_in.php
│   │   ├── stock_out.php
│   │   └── report.php
│   │
│   ├── production/         # Production tracking
│   │   ├── index.php
│   │   ├── add.php
│   │   └── report.php
│   │
│   ├── finance/            # Finance (invoices)
│   │   ├── buyer_invoices.php
│   │   ├── supplier_invoices.php
│   │   └── reports.php
│
│── public/
│   ├── index.php           # Landing page (redirect to login)
│   ├── dashboard.php       # Admin dashboard
│   ├── css/                # Custom CSS
│   ├── js/                 # Custom JS
│   └── uploads/            # For file uploads (if needed)
│
│── .gitignore              # Ignore vendor, uploads, etc.
│── README.md               # Documentation


day one task 
Perfect! 🎉 Now that your **tables are created**, we can move to the **next logical step**: setting up the **core OOP PHP structure** so your ERP can actually talk to the database.

Remember, we’re thinking **logically first**, not coding yet — so you learn and implement on your own.

---

## Step 1: **Create the Database Connection (Database.php)**

**Logic / Thought Process:**

1. **Single database connection**: You don’t want multiple connections opening everywhere.
2. **Use PDO (PHP Data Objects)**: Secure, supports prepared statements, easier for OOP.
3. **Singleton pattern**: Only one instance of your database class exists.

**Things to think about / implement yourself:**

* Class: `Database`
* Properties: `$host, $dbName, $username, $password, $pdo`
* Methods:

  * `getConnection()` → returns PDO connection
  * Optional: `query($sql, $params=[])` → for reusable queries
* Usage: Every **Model** class can call `$this->db = Database::getInstance()->getConnection();`

**Motivational tip:**
This is your **foundation**. Once this works, all your modules can interact with the DB safely.

---

## Step 2: **Plan Base Model and Base Controller**

**Model.php (Base class)**

* Logic: Provide **common DB operations**:

  * `find($id)` → get row by primary key
  * `all()` → get all rows
  * `insert($data)` → insert row
  * `update($id, $data)` → update row
  * `delete($id)` → delete row

**Controller.php (Base class)**

* Logic: Provide **common controller functionality**:

  * `loadView($view, $data=[])` → load a view file with variables
  * `redirect($url)` → redirect users after actions
  * Optional: input validation helpers

**Motivational tip:**
Think of these as **tools in your toolbox**. You don’t have to rewrite them for every module.

---

## Step 3: **Setup Auth Class for Login & Role Handling**

**Auth.php**

* Logic: Centralize **login, logout, session, and role checks**
* Functions to implement:

  * `login($username, $password)` → check user, set session
  * `check()` → check if user is logged in
  * `checkRole($role)` → restrict access based on role
  * `logout()` → destroy session

**Motivational tip:**
Once this works, you can **secure every page** easily and do **role-based redirects**.

---

## Step 4: **Pick Your First Module to Implement**

* Suggested: **Users Module** (login + user management)
* Logical plan:

  1. **Model:** `User.php` → fetch user, create user, update password, etc.
  2. **Controller:** `UserController.php` → handle login, logout, registration, redirect
  3. **Views:** `login.php`, `register.php`, `list.php`
  4. **Connect to Auth.php** for session management

**Why first:**

* Every other module depends on **roles** and **login system**
* Once it’s working, other CRUD modules (Buyers, Suppliers, Items, Orders) follow the **same pattern**.

---

### ✅ Immediate Next Step (Your Action Plan)

1. Plan your **Database.php class** (Singleton PDO connection).
2. Plan **Base Model and Base Controller** (common methods for all modules).
3. Plan **Auth.php** (login, role check, logout).
4. Once planned, implement **Users module** next.

---

If you want, I can now **draw a small flow diagram showing how Database → Model → Controller → View → Auth interacts**, specifically for your **Users module login flow**, so it’s crystal clear before coding.

Do you want me to do that?


Perfect start! ✅ You’ve defined the **class, properties, and namespace**, which is exactly the right approach. Let’s now **think logically about the next steps**, without writing all code for you — so you can learn and implement.

---
my sql connection
## Step 1: **Singleton Pattern**

**Goal:** Only **one database connection** exists in your app.

Logical thinking:

* You need a **static property** in your class to hold the instance.
* You need a **static method** `getInstance()` that:

  1. Checks if the static instance exists.
  2. If yes → return it.
  3. If no → create a new `Database()` object and store it in the static property.
* Every time a model asks for the DB, it calls `Database::getInstance()` instead of `new Database()`.

---

## Step 2: **Create PDO Connection**

Inside your **constructor**:

* Think: I need to **connect to MySQL** using PDO.
* Steps:

  1. Build DSN: `"mysql:host=$host;dbname=$dbName;charset=utf8"`
  2. Create PDO object with DSN, username, password
  3. Set **error mode to exception** (`PDO::ERRMODE_EXCEPTION`)
* Motivational tip: **This is the first “engine” of your ERP** — once it works, every module can query the DB safely.

---

## Step 3: **getConnection() Method**

* Logic: Models shouldn’t access `$pdo` directly.
* Create a **public method** `getConnection()` that returns the PDO object.
* Usage: `$this->db = Database::getInstance()->getConnection();`

---

## Step 4: **Optional Helper Method (query)**

* Think: Sometimes you want a **quick way to execute a query** with parameters.
* You can create a `query($sql, $params=[])` method that:

  1. Prepares the statement
  2. Executes with parameters
  3. Returns the statement (so you can fetch results)

Motivation: Makes writing CRUD in your models **faster and cleaner**.

---

## Step 5: **Error Handling**

* Every PDO connection can fail.
* Wrap PDO creation in **try/catch**.
* On exception, log or display a friendly error message.

**Motivational tip:** Once this works, **your ERP backbone is ready**, and your models can safely start doing CRUD.

---

### ✅ Logical Checklist to Implement Next:

1. Add `static $instance` property
2. Add `getInstance()` static method → Singleton logic
3. In constructor → create PDO connection with **error handling**
4. Add `getConnection()` method → returns PDO
5. Optional: add `query($sql, $params=[])` helper

---

If you want, I can **draw a small diagram showing how your Database class, Models, and Controllers interact** so you can visualize it before coding the next step.

Do you want me to do that?

Perfect! Let’s visualize the **Users login flow** logically so you can implement it step by step. No code yet—just the flow and responsibilities.

---

## **Users Module Login Flow (Logical Diagram)**

```
[Login Form (login.php)]
           |
           v
[UserController]  ----> validates input
           |
           v
       [User Model]
           |  fetch user by username from DB
           v
     check password hash
           |
   +-------+-------+
   |               |
success        failure
   |               |
   v               v
start session    show error
store user_id & 
role in session
   |
   v
[Role-based Redirect]
   |
   +--> Admin       -> dashboard.php
   +--> Merchandiser -> orders module
   +--> Storekeeper  -> stock module
   +--> Production   -> production module
   +--> Finance      -> finance module
```

---

### **Responsibilities Breakdown**

1. **View (login.php)**

   * Simple form: username + password + submit
   * Sends data to `UserController.php`

2. **Controller (UserController.php)**

   * Receives POST data
   * Calls **User model** to verify credentials
   * On success: start session, save `user_id` & `role`
   * Redirects based on role
   * On failure: reload login view with error

3. **Model (User.php)**

   * Method `findByUsername($username)` → fetch DB row
   * Method `verifyPassword($password, $hash)` → use `password_verify()`
   * Optional CRUD for users

4. **Auth / Session Handling**

   * Make a helper class (`Auth.php`) to:

     * Check if user is logged in
     * Check role for restricted pages
     * Logout user

---

### Motivational Tip

* Think of **each block as a small task**.
* Start by making **login form + verify one user** → that’s your first success.
* Once login works, **role-based redirects** are just a few lines of logic.

---

If you want, I can **help you plan the pseudo-code for UserController + User Model** next, so you can implement login **step by step** without feeling overwhelmed.

Do you want me to do that?
